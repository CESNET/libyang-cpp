{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6d313fd2_d235b2b0",
        "filename": "include/libyang-cpp/DataNode.hpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-03T00:18:17Z",
      "side": 1,
      "message": "- nit: typo, \"associated\"\n- is there a C-level structure? `lyd_meta` seems relevant, but I see it is not really wrapped here, so perhaps this deserves a nice example on how it\u0027s used?",
      "range": {
        "startLine": 153,
        "startChar": 34,
        "endLine": 153,
        "endChar": 44
      },
      "revId": "9334d38e679575026c8fcf3f702568c9f0e57703",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3af153dd_6181e34c",
        "filename": "include/libyang-cpp/DataNode.hpp",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-03T00:18:17Z",
      "side": 1,
      "message": "This is undocumented. I would appreciate an example, such as ietf-netconf:operation, etc.",
      "revId": "9334d38e679575026c8fcf3f702568c9f0e57703",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82233c7e_0964f0f0",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-03T00:18:17Z",
      "side": 1,
      "message": "Since this is C++ and the problem of instance slicing is well known, the class should probably explain why it is not a problem for this particular type, and that it\u0027s safe to take a SchemaNode by value. While you\u0027re at that, please also document behavior of these wrappers (especially regarding the error handling).",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 61,
        "endChar": 34
      },
      "revId": "9334d38e679575026c8fcf3f702568c9f0e57703",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ee85185_4023c4d1",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-03T00:18:17Z",
      "side": 1,
      "message": "consider expanding this one (and the ActionRpcOoutput below as well) with \"... of an RPC or an action\"",
      "range": {
        "startLine": 142,
        "startChar": 55,
        "endLine": 142,
        "endChar": 67
      },
      "revId": "9334d38e679575026c8fcf3f702568c9f0e57703",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14c02097_d1bb85df",
        "filename": "include/libyang-cpp/Type.hpp",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-03T00:18:17Z",
      "side": 1,
      "message": "IMHO this needs more details -- some text about the difference between libyang::types, libyang::Type, etc. Preferably not as a doxygen comment for a namespace, but more like a generic \"howto\" chapter about how to use this library -- how to walk the schema, how to parse data, how to validate it, how to query the data tree, how to walk it, how to modify it, etc.",
      "revId": "9334d38e679575026c8fcf3f702568c9f0e57703",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebc6f344_0f578701",
        "filename": "src/SchemaNode.cpp",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-03T00:18:17Z",
      "side": 1,
      "message": "nit: typo",
      "range": {
        "startLine": 29,
        "startChar": 28,
        "endLine": 29,
        "endChar": 36
      },
      "revId": "9334d38e679575026c8fcf3f702568c9f0e57703",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12ab53e5_17babcbf",
        "filename": "src/SchemaNode.cpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-03T00:18:17Z",
      "side": 1,
      "message": "Assume that the user doesn\u0027t know what \"a name\" is.",
      "revId": "9334d38e679575026c8fcf3f702568c9f0e57703",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3045451_41065db3",
        "filename": "src/SchemaNode.cpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-03T00:18:17Z",
      "side": 1,
      "message": "lys_getnext *hints* that it\u0027s a schema order, but they don\u0027t say that explicitly. Can you please verify with upstream (preferably by sending a patch for lys_getnext and lys_getnext_ext which says that this is a schema order)?",
      "range": {
        "startLine": 75,
        "startChar": 62,
        "endLine": 75,
        "endChar": 100
      },
      "revId": "9334d38e679575026c8fcf3f702568c9f0e57703",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}