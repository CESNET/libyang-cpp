{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "239619bd_93d14d26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-10T14:52:23Z",
      "side": 1,
      "message": "something for a follow-up patch: test (at least some of) the throwing path(s)",
      "revId": "e3fcd964d8bc36e90a92160488772f2eae252465",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fd7feb6_743e5b6b",
        "filename": "include/libyang-cpp/utils/exception.hpp",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-10T14:52:23Z",
      "side": 1,
      "message": "why not just `Exception`? It\u0027s already namespace-wrapped, and I don\u0027t think you\u0027ll need a second exception class (unless you do an exception for each error code)",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 22
      },
      "revId": "e3fcd964d8bc36e90a92160488772f2eae252465",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4963e6f4_da50ee9e",
        "filename": "include/libyang-cpp/utils/exception.hpp",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-06-11T04:48:29Z",
      "side": 1,
      "message": "I need at least two exception types. One for a libyang error that has an error code and one that doesn\u0027t have the error code (for \"my\" errors, like when the user tries to convert a non-term node to DataNodeTerm). The latter type could be std::runtime_error, but I think you told me (on our call), that we should use our exception types instead of runtime_error.\n\nI could also do something like\n\n libyang::Exception : std::runtime_error {}\n libyang::ExceptionCode : libyang::Exception {}",
      "parentUuid": "0fd7feb6_743e5b6b",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 22
      },
      "revId": "e3fcd964d8bc36e90a92160488772f2eae252465",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36597941_cc6ec918",
        "filename": "include/libyang-cpp/utils/exception.hpp",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-11T10:00:50Z",
      "side": 1,
      "message": "Good; but please explain this in a Doxygen comment.",
      "parentUuid": "4963e6f4_da50ee9e",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 22
      },
      "revId": "e3fcd964d8bc36e90a92160488772f2eae252465",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81ef5402_2951ee79",
        "filename": "include/libyang-cpp/utils/exception.hpp",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-06-11T17:33:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36597941_cc6ec918",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 22
      },
      "revId": "e3fcd964d8bc36e90a92160488772f2eae252465",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}