{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "31683336_4d0aff7b",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 443,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-28T15:29:32Z",
      "side": 1,
      "message": "DOCTEST_SUBCASE has a meaning (https://github.com/doctest/doctest/blob/master/doc/markdown/tutorial.md#test-cases-and-subcases), and we don\u0027t need that in this context. Just use a simple leading comment and let all these tests run in a sequence, please (here and at all places below).",
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1b5b1d2_24fb8df5",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 443,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-28T18:28:44Z",
      "side": 1,
      "message": "You are trying to tell me to just merge Choice::isMandatory + Choice::defaultCase + Choice::cases as so?\n\nIf yes, please let\u0027s communicate this over the private channel (Slack).\n\nI am getting a bit confused as I have been requested again and again across PRs to do things I am trying to implement in the same way as I see in libyang-cpp and I am still getting change request. \n\nWhat more, it seems as non-sense to remove DOCTEST_SUBCASE. I would not get what exactly fails what is against DX.",
      "parentUuid": "31683336_4d0aff7b",
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c2f6979_95738f50",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 443,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-02T12:19:51Z",
      "side": 1,
      "message": "I sent some more detailed feedback over slack. The short summary is there are no hard rules on when DOCTEST_SUBCASE is \"required\" and when it\u0027s \"forbidden\", and it\u0027s a matter of style. I think that the existing code has a \"style\" where subsections are used either for \"test matrices\" for data setup, or for ensuring that some scenarios which cannot apply during a single test run are run in a mutually exclusive manner, and only occasionally for \"mere grouping\" of stuff -- like it\u0027s done at the outermost level, where it\u0027s useful for passing some test options at runtime which specify \"what subcases to run\".\n\nThe expected fix would be to either flatten the inner subcases, or, as I just did in the newly uploaded patch, use the subcases to set up \"a test matrix\", and have it run at the outer DOCTEST_SUBCASE. The new code is shorter and (IMHO) more readable. Also, it manages to test all properties of all four `choice` statements, whereas the PS11 version introduced four choices into the model, but only tested three of them in each inner DOCTEST_SUBCASE (that\u0027s, BTW, one more reason for this approach to structured testing, IMHO).",
      "parentUuid": "e1b5b1d2_24fb8df5",
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ea880b1_3b60cae9",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 453,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-28T15:29:32Z",
      "side": 1,
      "message": "nit: in a context like this, we prefer:\n REQUIRE(choiceWithDefault.defaultCase()-\u003ename() \u003d\u003d \"case1\");",
      "range": {
        "startLine": 453,
        "startChar": 38,
        "endLine": 453,
        "endChar": 66
      },
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1cd2fb3_01322b76",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 453,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-28T18:28:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6ea880b1_3b60cae9",
      "range": {
        "startLine": 453,
        "startChar": 38,
        "endLine": 453,
        "endChar": 66
      },
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "313cd4d0_b9190139",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 463,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-28T15:29:32Z",
      "side": 1,
      "message": "basicCases is a vector\u003cCase\u003e, basicCases.at(0) is a Case already, so calling Case::asCase (which is a SchemaNode::asCase) has no benefit here. It will be more readable that way.",
      "range": {
        "startLine": 463,
        "startChar": 40,
        "endLine": 463,
        "endChar": 49
      },
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b94338b8_7103d078",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 463,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-28T18:28:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "313cd4d0_b9190139",
      "range": {
        "startLine": 463,
        "startChar": 40,
        "endLine": 463,
        "endChar": 49
      },
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76d067a2_a57fb7f1",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 465,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-28T15:29:32Z",
      "side": 1,
      "message": "This is rather unreadable, please do it like this:\n \nauto it \u003d basicCases.at(0).asCase().immediateChildren().begin();\nREQUIRE(it-\u003easLeaf().name() \u003d\u003d \"choiceBasicLeaf1\");\n++it;\nREQUIRE(it-\u003easLeafList().name() \u003d\u003d \"choiceBasicLeafList1\";",
      "range": {
        "startLine": 464,
        "startChar": 0,
        "endLine": 465,
        "endChar": 130
      },
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d909fc6b_8c82adc9",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 465,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-28T18:28:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "76d067a2_a57fb7f1",
      "range": {
        "startLine": 464,
        "startChar": 0,
        "endLine": 465,
        "endChar": 130
      },
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bb79e6c_e9b8fd42",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 10
      },
      "lineNbr": 465,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-02T12:19:51Z",
      "side": 1,
      "message": "Sorry, this one segfaults because the iterator outlives the collection (the result of immediateChildren() is immediately destroyed), my bad. Fixed in the reworked patch.",
      "parentUuid": "d909fc6b_8c82adc9",
      "range": {
        "startLine": 464,
        "startChar": 0,
        "endLine": 465,
        "endChar": 130
      },
      "revId": "f140fb3f1a943810ad1158431d86ba1ba0259afb",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}