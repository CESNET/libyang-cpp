{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4febbafa_6698d453",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-03T13:41:22Z",
      "side": 1,
      "message": "I tried to add support for when (lysc_when_when) statement. \n\nUnfortunately, I was able to transform `cond` to string only. If I try to access `cond` object (which is of type `lyxp_expr`) to represent expression as an object, it ends with error:\n\n```\n/Users/bedrich.schindler/Projekty/libyang-cpp/src/SchemaNode.cpp: In member function \u0027std::string_view libyang::When::condition() const\u0027:\n/Users/bedrich.schindler/Projekty/libyang-cpp/src/SchemaNode.cpp:92:15: error: variable \u0027lyxp_expr cond\u0027 has initializer but incomplete type\n   92 |     lyxp_expr cond \u003d *m_when-\u003econd;\n```\n\nYou can end up with this error with following modification:\n\n```\nstd::string_view When::condition() const\n{\n    lyxp_expr cond \u003d *m_when-\u003econd;\n    return lyxp_get_expr(m_when-\u003econd);\n}\n```\n\nCould you help me with this? I think that `when` representation would be better in form of object instead of string.",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4989228d_1365b2b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T13:55:28Z",
      "side": 1,
      "message": "Looks like that is only part of libyang\u0027s private API (src/xpath.h). If you think that there\u0027s value in making this public, please ask for that upstream in libyang\u0027s github.\n\nI wonder what\u0027s your use case, though. Implementing this properly sounds like a big task, roughly half as big as reimplementing the client-side validation.",
      "parentUuid": "4febbafa_6698d453",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a04ec327_4cb7728e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-03T14:35:51Z",
      "side": 1,
      "message": "If you are OK with returning `when` as string, we can leave it as it is. I just thought you would like to have it implemented as object instead of string.\n\nNOTE: All the changes we made in libyang-cpp are for the purpose of WebAssembly. In RACOM, we use it on front-end client to display, parse and validate data on client side even before it is send via network to save transferred data and to improve user experience. Libyang is great library for everything we need, but to meet user experience of 2023 is requiring to parse and read all those attributes for purpose or UI rendering and real-time user validations.",
      "parentUuid": "4989228d_1365b2b8",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cd4927a_98eb69f5",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T13:55:28Z",
      "side": 1,
      "message": "Since the `when` statement is common to all schema nodes (https://datatracker.ietf.org/doc/html/rfc7950#section-7.21.5), please add the `When when() const` here to SchemaNode instead of adding that in the derived classes.",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "264126b2_cf336383",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-03T14:35:51Z",
      "side": 1,
      "message": "It is not, e.g. Action/RPC and its Input/Output does not implement `when`. So it means in cannot be part of SchemaNode, because ActionRpc implements it. Or can be, but it must thrown an error which is kinda dirty in my opinion. But you are the author, you decide.",
      "parentUuid": "3cd4927a_98eb69f5",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6e7bde5_1f04cc91",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T13:55:28Z",
      "side": 1,
      "message": "just add that to one leaf, there\u0027s no need to test all the individual schema node types",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c7a32f_d2b95c3c",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-03T14:35:51Z",
      "side": 1,
      "message": "OK, I can remove that. But in previous cases, I tested the same property for all types and it passed code review as well (for example isMandatory)",
      "parentUuid": "d6e7bde5_1f04cc91",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}