{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4febbafa_6698d453",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-03T13:41:22Z",
      "side": 1,
      "message": "I tried to add support for when (lysc_when_when) statement. \n\nUnfortunately, I was able to transform `cond` to string only. If I try to access `cond` object (which is of type `lyxp_expr`) to represent expression as an object, it ends with error:\n\n```\n/Users/bedrich.schindler/Projekty/libyang-cpp/src/SchemaNode.cpp: In member function \u0027std::string_view libyang::When::condition() const\u0027:\n/Users/bedrich.schindler/Projekty/libyang-cpp/src/SchemaNode.cpp:92:15: error: variable \u0027lyxp_expr cond\u0027 has initializer but incomplete type\n   92 |     lyxp_expr cond \u003d *m_when-\u003econd;\n```\n\nYou can end up with this error with following modification:\n\n```\nstd::string_view When::condition() const\n{\n    lyxp_expr cond \u003d *m_when-\u003econd;\n    return lyxp_get_expr(m_when-\u003econd);\n}\n```\n\nCould you help me with this? I think that `when` representation would be better in form of object instead of string.",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4989228d_1365b2b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T13:55:28Z",
      "side": 1,
      "message": "Looks like that is only part of libyang\u0027s private API (src/xpath.h). If you think that there\u0027s value in making this public, please ask for that upstream in libyang\u0027s github.\n\nI wonder what\u0027s your use case, though. Implementing this properly sounds like a big task, roughly half as big as reimplementing the client-side validation.",
      "parentUuid": "4febbafa_6698d453",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a04ec327_4cb7728e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-03T14:35:51Z",
      "side": 1,
      "message": "If you are OK with returning `when` as string, we can leave it as it is. I just thought you would like to have it implemented as object instead of string.\n\nNOTE: All the changes we made in libyang-cpp are for the purpose of WebAssembly. In RACOM, we use it on front-end client to display, parse and validate data on client side even before it is send via network to save transferred data and to improve user experience. Libyang is great library for everything we need, but to meet user experience of 2023 is requiring to parse and read all those attributes for purpose or UI rendering and real-time user validations.",
      "parentUuid": "4989228d_1365b2b8",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4055a1da_b5db5f95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T23:19:58Z",
      "side": 1,
      "message": "I\u0027m assuming that your ultimate end goal is to hide/show a bunch of widgets based on the *result* of the `when` statement, right?\n\nIf that\u0027s the case, then I *think* it is actually not needed to dive in into how exactly that internal `lyxp_expr` is built (i.e., to tokenize that `when` string into a bunch of atoms, then resolve them to schema nodes (`lyxp_atomize()`), and then represent the entire expression as a tree of some operations on some nodes). The only thing which is needed is, AFAIU, a function which takes a schema node\u0027s `when` statement as-is, evaluates that statement based on some forest of data node trees, and returns you a boolean saying \"yes\" or \"no\". That\u0027s something that libyang can do internally (it looks like it\u0027s `lyxp_eval()` when called with correct arguments, which the docs hint is not easy), but I don\u0027t think there\u0027s any public API for that.\n\nThis new function could then be used for checking `must` as well, so that your UI will be able to not just show/hide stuff, but also to red-highlight fields which are invalid. (You can probably do that already by requesting an explicit validation, but hey, this one might be less costly in terms of CPU time.)\n\nThis is different from how I understood your goal based on the very first comment on this patch. I assumed that you want to *represent* arbitrary expressions from `when` in C++ classes, and that you somehow want to interpret these expressions yourself. That\u0027s something which I think could work on trivial cases, but in the end doing stuff properly and in a standard-compliant way would mean reimplementing a significant part of libyang (the entire XPath evaluator, essentially) once again in your frontend code.\n\nOnce you have that function, wrapping that in C++ should be very easy. Can you please ask upstream whether they could add that? Or do I misunderstand you?",
      "parentUuid": "a04ec327_4cb7728e",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3955babf_96b56503",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-04T07:48:01Z",
      "side": 1,
      "message": "Actually, we can leave it as it is. If you are OK with returning string representation, it is better for us. \n\nSide note: I must have been tired yesterday. Short story long: we are gonna evaluate this XPath expression using JavaScript/WebAssembly before hitting libyang validation. I don\u0027t wanna bother you with details. Our team is exposing those statements for those kind of purposes. We still use libyang functions before sending configuration to the device, but functions like isMandatory, length, range, minElements, maxElements, ..., to improve user experience. And it will be same with when/must.",
      "parentUuid": "4055a1da_b5db5f95",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cd4927a_98eb69f5",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T13:55:28Z",
      "side": 1,
      "message": "Since the `when` statement is common to all schema nodes (https://datatracker.ietf.org/doc/html/rfc7950#section-7.21.5), please add the `When when() const` here to SchemaNode instead of adding that in the derived classes.",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "264126b2_cf336383",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-03T14:35:51Z",
      "side": 1,
      "message": "It is not, e.g. Action/RPC and its Input/Output does not implement `when`. So it means in cannot be part of SchemaNode, because ActionRpc implements it. Or can be, but it must thrown an error which is kinda dirty in my opinion. But you are the author, you decide.",
      "parentUuid": "3cd4927a_98eb69f5",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31b189fc_8d88678d",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T23:19:58Z",
      "side": 1,
      "message": "You\u0027re right, my bad. I trusted the English summary without checking the ABNF. I\u0027m sorry.",
      "parentUuid": "264126b2_cf336383",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "505593d5_4d17c59d",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-30T16:58:27Z",
      "side": 1,
      "message": "This turned out to be a bit more complex, because libyang actually implements `when` for actions and RPCs:\n\n https://netopeer.liberouter.org/doc/libyang/devel/html/group__schematree.html#structlysc__node__action\n\nThey have a comment for that:\n\n\u003e the action/RPC nodes do not contain the when statement on their own, but they can inherit it from the parent\u0027s uses.\n\nAnd indeed, since these actions can \"materialize\" through the `uses` statement (which might have a `when`) that refers to a `grouping` which embeds an `action`.\n\nTL;DR: it\u0027s now part of SchemaNode proper because that felt like the easiest fix. The only corner case are input/output nodes, and I think that the easy-of-use of this new API is worth the irregularity. The code does the right thing, it simply returns  an empty list.",
      "parentUuid": "31b189fc_8d88678d",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e73eee8_cc12382f",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T23:19:58Z",
      "side": 1,
      "message": "- make this one private, and befriend all the classes which need to invoke it; that way we are not telling the user that this is a public API\n\n- add a member `std::shared_ptr\u003cly_ctx\u003e m_ctx` and pass it via constructor (check how other schema classes deal with this, e.g. Module/Identity) so that the memory management works as expected",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03c1336a_0c7689ab",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-04T07:37:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4e73eee8_cc12382f",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6e7bde5_1f04cc91",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T13:55:28Z",
      "side": 1,
      "message": "just add that to one leaf, there\u0027s no need to test all the individual schema node types",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c7a32f_d2b95c3c",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-08-03T14:35:51Z",
      "side": 1,
      "message": "OK, I can remove that. But in previous cases, I tested the same property for all types and it passed code review as well (for example isMandatory)",
      "parentUuid": "d6e7bde5_1f04cc91",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8806fe14_06b8f29b",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-03T23:19:58Z",
      "side": 1,
      "message": "my request assumed that the `when` statement was common for all nodes; it is not, so it makes sense to keep the tests because these are \"different methods\".",
      "parentUuid": "c2c7a32f_d2b95c3c",
      "revId": "a8f38609d7203857c134fde743d35eb59088bc30",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}