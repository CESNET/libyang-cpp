{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c100a36c_f5f2b411",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2022-12-21T12:35:24Z",
      "side": 1,
      "message": "Can I have a question what causes Zuul CI node to fail and if there is any way how can I repair it? I\u0027ve tried to push the same commit again but I does not solve the problem. (I would like to bother you as little as possible and ideally be able to solve it myself so as not to bother you)",
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9424de0a_8876a572",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-21T12:50:22Z",
      "side": 1,
      "message": "I\u0027m afraid you cannot help here, unfortunately the private OpenStack infrastructure which powers all this is having a bad day due to resource oversubscription and heavy utilization. TL;DR: our private cloud ran out of machines. Just ignore this, and I\u0027ll try to pull some internal strings.",
      "parentUuid": "c100a36c_f5f2b411",
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53726a99_4eed0725",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-21T12:50:22Z",
      "side": 1,
      "message": "Please add a comment saying that the 32bit data type comes from libyang (because RFC7950 doesn\u0027t define this AFAICT)",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 12
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a20ff4b_466ad84f",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2022-12-21T14:27:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53726a99_4eed0725",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 12
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00f426ca_b9afd744",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-04T15:04:28Z",
      "side": 1,
      "message": "Thanks. I was a bit surprised that this is indeed a 32bit type, and I\u0027m not particularly happy with hardcoding that in several places. Can you please add a `using` definition for that into include/libyang-cpp/Type.hpp:\n namespace libyang {\n namespace types {\n namespace contraints {\n   using ListSize \u003d uint32_t;\n }\n }\n }\n\n...and then use `libyang::types::constraints::ListSize` everywhere? I wonder why they don\u0027t have a typedef in libyang...",
      "parentUuid": "8a20ff4b_466ad84f",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 12
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed563335_588ccc15",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-06T13:17:59Z",
      "side": 1,
      "message": "I\u0027ve also added a static_assert so that the build will fail if upstream ever changes the underlying data type.",
      "parentUuid": "00f426ca_b9afd744",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 12
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11e11d6a_b7b6cbf8",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-21T12:50:22Z",
      "side": 1,
      "message": "let\u0027s call these minElements() and maxElements(), please, so that it\u0027s clear that it has no relation to the actual value range",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 128,
        "endChar": 25
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eddf3d35_fd7e5f81",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2022-12-21T14:27:36Z",
      "side": 1,
      "message": "OK. Originally, I have it this way but then I renamed it to have the same name as in libyang (C). Will use \"YANG naming\" next time. Thanks",
      "parentUuid": "11e11d6a_b7b6cbf8",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 128,
        "endChar": 25
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5be17d1f_8d04dec2",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 4
      },
      "lineNbr": 502,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-21T12:50:22Z",
      "side": 1,
      "message": "That\u0027s what I would have expected, but reading libyang\u0027s source code, they define it this way:\n\n    uint32_t min;                    /**\u003c min-elements constraint */\n    uint32_t max;                    /**\u003c max-elements constraint, 0 means unbounded */",
      "range": {
        "startLine": 502,
        "startChar": 82,
        "endLine": 502,
        "endChar": 118
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a099c854_f08c97cc",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 4
      },
      "lineNbr": 502,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2022-12-21T14:27:36Z",
      "side": 1,
      "message": "I checked the libyang code:\n\nFor lysc_node_list, lysc_node_leaflist:\n    uint32_t min;                    /**\u003c min-elements constraint */\n    uint32_t max;                    /**\u003c max-elements constraint */\n\nFor lysp_node_list, lysp_node_leaflist:\n    uint32_t min;                    /**\u003c min-elements constraint */\n    uint32_t max;                    /**\u003c max-elements constraint, 0 means unbounded */\n\nWhile we use lysc_xxx (as well as in another code written by your team, e.g. std::vector\u003cLeaf\u003e List::keys() const), I think my version should be correct, should\u0027t be?",
      "parentUuid": "5be17d1f_8d04dec2",
      "range": {
        "startLine": 502,
        "startChar": 82,
        "endLine": 502,
        "endChar": 118
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a11ac7d_bd7a5136",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 4
      },
      "lineNbr": 502,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-04T15:04:28Z",
      "side": 1,
      "message": "thanks, good catch!",
      "parentUuid": "a099c854_f08c97cc",
      "range": {
        "startLine": 502,
        "startChar": 82,
        "endLine": 502,
        "endChar": 118
      },
      "revId": "b11e2d487a76c3666aa1f8dfa76a6c5792def4f3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}