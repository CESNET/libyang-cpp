{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1a2cd515_9544003d",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-21T09:43:50Z",
      "side": 1,
      "message": "Other places check m_module-\u003ecompiled, and it looks like this member will be always nullptr if the module is not implemented. So, please:\n\n- add a test for this,\n- check for nullptr.",
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5621996_95fea556",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-21T18:10:05Z",
      "side": 1,
      "message": "If you look at the SchemaNode::child(), it uses lysc_node_child(). As lysc_node_child() is not working with lys_module (but with lysc_node), I dived into the lysc_node_child() implementation. Then I found: If the node is falsy, null is returned. And then if its child is falsy, then null is returned (case when no root node is available). Then I need to check for compiled as well.\n\nIf I am right, this should be valid implementation, shouldn\u0027t it?\n\n```\nif (!m_module || !m_module-\u003ecompiled || !m_module-\u003ecompiled-\u003edata)\n```",
      "parentUuid": "1a2cd515_9544003d",
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc66c21e_eeb6f2a0",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-21T20:59:14Z",
      "side": 1,
      "message": "I was also thinking about it and I though that this might be enough:\n\n```\nstd::optional\u003cSchemaNode\u003e Module::child() const\n{\n    if (!m_module-\u003eimplemented) {\n        throw Error{\"Module::child: module is not implemented\"};\n    }\n\n    if (!m_module-\u003ecompiled-\u003edata) {\n        return std::nullopt;\n    }\n\n    return SchemaNode{m_module-\u003ecompiled-\u003edata, m_ctx};\n}\n```\n\nThe reason I was unable to make this working before was due to typo in example_schema.hpp. Now it works as expected.",
      "parentUuid": "d5621996_95fea556",
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ff75ded_870c371f",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-21T22:05:46Z",
      "side": 1,
      "message": "In patchset 8, I introduced tests for this. Such tests have been missing for SchemaNode, so I get inspired in context.cpp tests. To be honest, I am in the mode when I mostly have no idea what I am doing, just trying to do my best to accomplish the task. Will try to do my best to potentially fix it if you are not ok with the implementation, but it is beyond my knowledge both libyang and C++, I am afraid.",
      "parentUuid": "dc66c21e_eeb6f2a0",
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a5b2cde_71aab2d9",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2025-01-07T13:21:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1ff75ded_870c371f",
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "477dfe09_3a55f038",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-21T09:43:50Z",
      "side": 1,
      "message": "this is misleading, there\u0027s no DataNodeCollectionDfs when iterating over schema nodes",
      "range": {
        "startLine": 211,
        "startChar": 3,
        "endLine": 211,
        "endChar": 106
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72618933_6494035f",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-21T18:10:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "477dfe09_3a55f038",
      "range": {
        "startLine": 211,
        "startChar": 3,
        "endLine": 211,
        "endChar": 106
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5ce6a5e_b588c95a",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 214,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-21T09:43:50Z",
      "side": 1,
      "message": "this needs a check to prevent a possible null pointer dereference",
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9516564_04a5cf9f",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 214,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-21T18:10:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f5ce6a5e_b588c95a",
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df7a445b_fd378186",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-21T09:43:50Z",
      "side": 1,
      "message": "I\u0027m not sure that this is supported by the rest of the code; in particular the Iterator\u0027s operator++ will probably dereference a null pointer. Could you please add a test which obtains an iterator from this collection, and tries to increment it?\n\n(@Tomas, do you remember from the top of your head whether it\u0027s OK to dereference an iterator past the end of the range?)",
      "range": {
        "startLine": 226,
        "startChar": 78,
        "endLine": 226,
        "endChar": 94
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44b596cd_27a9ca90",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-21T18:10:05Z",
      "side": 1,
      "message": "I just want to mention that this is how it is already implemented in SchemaNode::immediateChildren (which is the same case as the module points to schema node). And it is same as implemented in DataSchema::immediateChildren as well.\n\nThis is all I can say about it.",
      "parentUuid": "df7a445b_fd378186",
      "range": {
        "startLine": 226,
        "startChar": 78,
        "endLine": 226,
        "endChar": 94
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7821cce2_b66f329d",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-11-27T20:50:12Z",
      "side": 1,
      "message": "I remember we discussed this case some time ago.\n\nI think this code is valid. In the beginning of Iterator::op++ there is a branch for such cases (incrementing nullptr is a noop) and then we are comparing two nullptrs.\nNot sure if the semantics of the op++ is correct (not an issue of this patch), but no dereferencing happens here, does it?",
      "parentUuid": "44b596cd_27a9ca90",
      "range": {
        "startLine": 226,
        "startChar": 78,
        "endLine": 226,
        "endChar": 94
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0dfe52b_39292eed",
        "filename": "src/Module.cpp",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2025-01-07T13:21:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7821cce2_b66f329d",
      "range": {
        "startLine": 226,
        "startChar": 78,
        "endLine": 226,
        "endChar": 94
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83c39ddd_75af97de",
        "filename": "tests/example_schema.hpp",
        "patchSetId": 3
      },
      "lineNbr": 404,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-21T09:43:50Z",
      "side": 1,
      "message": "this might go the the first commit in the series (Tomas asked for a test for a top-level object)",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 404,
        "endChar": 5
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f80f3d4b_d0444648",
        "filename": "tests/example_schema.hpp",
        "patchSetId": 3
      },
      "lineNbr": 404,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-21T13:46:01Z",
      "side": 1,
      "message": "I explained it over there: https://gerrit.cesnet.cz/c/CzechLight/libyang-cpp/+/7877/comment/47a5bc3b_0c1e6f78/\n\nLets solve the solution in mentioned comment.",
      "parentUuid": "83c39ddd_75af97de",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 404,
        "endChar": 5
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f0d8ff7_ddf6e72b",
        "filename": "tests/example_schema.hpp",
        "patchSetId": 3
      },
      "lineNbr": 404,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2024-11-27T08:39:37Z",
      "side": 1,
      "message": "@Tomas has acknowledged it in linked PR. So I suppose it is find to do it this way.",
      "parentUuid": "f80f3d4b_d0444648",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 404,
        "endChar": 5
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "826dcf9a_83490b83",
        "filename": "tests/example_schema.hpp",
        "patchSetId": 3
      },
      "lineNbr": 404,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-18T16:20:52Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "1f0d8ff7_ddf6e72b",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 404,
        "endChar": 5
      },
      "revId": "7f3a5a6a4937b4d4243311e25cbbf5d0cf738729",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}