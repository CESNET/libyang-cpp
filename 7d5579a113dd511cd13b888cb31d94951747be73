{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eb80fc02_86bcb35f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-12T20:51:44Z",
      "side": 1,
      "message": "It would be nice to explain what things are useful to check on the schema level from an `anydata` node. So far, this patch implements just the `mandatory` thing. Do you have plans/need/... for more?",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65209e39_8a7cb9b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-07-18T13:59:17Z",
      "side": 1,
      "message": "I might have used better commit message to be clear that I only introduce this type and I do not implement everything that is contained in RFC (and C library). Currently, we only need AnyData type and its mandatory attribute (and the parts that are already in SchemaNode).\n\nTo be clear, I am showing support on table from RFC:\n\n+--------------+---------+-------------+\n| substatement | section | cardinality | State of implementation\n+--------------+---------+-------------+\n| config       | 7.21.1  | 0..1        | Already part of SchemaNode\n| description  | 7.21.3  | 0..1        | Already part of SchemaNode\n| if-feature   | 7.20.2  | 0..n        | –\n| mandatory    | 7.6.5   | 0..1        | Newly implemented in AnyData\n| must         | 7.5.3   | 0..n        | –\n| reference    | 7.21.4  | 0..1        | –\n| status       | 7.21.2  | 0..1        | Already part of SchemaNode\n| when         | 7.21.5  | 0..1        | –\n+--------------+---------+-------------+\n\nWe might need `must`/`when` in the future, but as it is not implemented anywhere yet, I expect to implemented everywhere if we need it.",
      "parentUuid": "eb80fc02_86bcb35f",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b295abc_49ca3fc2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-18T14:19:21Z",
      "side": 1,
      "message": "OK. Please also say something like:\n\n Only some schema nodes allow the `mandatory` statement, so let\u0027s prepare a new class for `anyxml` and `anydata`.",
      "parentUuid": "65209e39_8a7cb9b4",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f979b12_067a7da1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-07-18T13:59:17Z",
      "side": 1,
      "message": "I forgot to send comments a month ago, so I\u0027m sorry for the delayed response.",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9efd232_3dd42709",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-12T20:51:44Z",
      "side": 1,
      "message": "From the schema perspective, `anydata` and `anyxml` are very similar (I don\u0027t know whether they are actually \"identical\" in terms of queries which make sense on the schema level; for sure they\u0027re different on the data validity level). Can we get by with a single class that supports both `anyxml` and `anydata` schema nodes? And do we have a better idea about naming than `AnyXmlAnyData` (but perhaps that\u0027s OK since we already have `ActionRpc`)?",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d64362e5_13a94243",
        "filename": "include/libyang-cpp/SchemaNode.hpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-07-18T13:59:17Z",
      "side": 1,
      "message": "As we do not need anyxml, I had not checked it. But you are true that their schema are identical and the change is simple. I will change it to AnyXmlAnyData and implement anyxml as well.",
      "parentUuid": "d9efd232_3dd42709",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "509d9ee0_2293d1d3",
        "filename": "src/SchemaNode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 299,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-12T20:51:44Z",
      "side": 1,
      "message": "This looks like a copy-paste from Container::isMandatory(). I checked the RFC, there\u0027s nothing specific to `anyxml` or `anydata`\u0027s `mandatory` statement, so the generic definition from https://datatracker.ietf.org/doc/html/rfc7950#page-14 applies.",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dce9367_846adc0e",
        "filename": "src/SchemaNode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 299,
      "author": {
        "id": 1000096
      },
      "writtenOn": "2023-07-18T13:59:17Z",
      "side": 1,
      "message": "Yeah, it the same. But is seems so straightforward to me that I did not abstracted it. Do you want to have some helper to read this flag and use it everywhere where mandatory is used?",
      "parentUuid": "509d9ee0_2293d1d3",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15fb7848_4960da3c",
        "filename": "src/SchemaNode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 299,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-18T14:19:21Z",
      "side": 1,
      "message": "Nah, you\u0027re right, this is a trivial one-liner. At the same time, `mandatory` is limited to just some schema nodes, so maybe it\u0027s better to require a special class like it was done here.\n\nNo need to change this.",
      "parentUuid": "4dce9367_846adc0e",
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a9e91df_29468576",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-12T20:51:44Z",
      "side": 1,
      "message": "I\u0027m not sure if this is valid, perhaps call it `ad` or `anydata_` or something?",
      "range": {
        "startLine": 25,
        "startChar": 12,
        "endLine": 25,
        "endChar": 19
      },
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5348826_5575d938",
        "filename": "tests/schema_node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 374,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-12T20:51:44Z",
      "side": 1,
      "message": "since this patch adds a new mandatory schema node to the model, and this part of the test feeds the parser with some data to parse against that model, this will need \"something\" for the new, mandatory `anydata` node",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 374,
        "endChar": 12
      },
      "revId": "7d5579a113dd511cd13b888cb31d94951747be73",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}