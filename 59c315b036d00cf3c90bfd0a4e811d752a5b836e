{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c3c0eaa9_39d146b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "please say in the commit message from which version of which project the majority of this code comes from",
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35989d53_19801d82",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T17:35:06Z",
      "side": 1,
      "message": "This is a complete rewrite.",
      "parentUuid": "c3c0eaa9_39d146b4",
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe351bf4_417c9808",
        "filename": "CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "please add a FIXME to switch to C++20\u0027s built-in formatting and TZ handling once we\u0027re on GCC 13.1+ everywhere (for regular formatting and TZ-aware code), or 14.1+ (for string parsing). Then we will be able to get rid of date/tz libs, and that separate .pc file.",
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2c339a3_0a45616b",
        "filename": "CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T16:43:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe351bf4_417c9808",
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe88775b_9e34c3ab",
        "filename": "CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "Please also add a few very simple test binaries which do *not* use the date/tz libraries directly, and which instead use the plain std::chrono functions. Set the TZ env variable for them to some \"interesting\" variants, such as:\n\n- TZ\u003dUTC\n- a TZ with non-whole-hour offset\n- some \"regular\" location that\u0027s different from Europe/Prague and UTC\n\n..and then try to break this code by sufficient test coverage :)",
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a77bcb81_936805f6",
        "filename": "CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T17:35:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe88775b_9e34c3ab",
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18179611_f0f82ec7",
        "filename": "CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "unless the test file calls some libyang function directly, this should not be needed",
      "range": {
        "startLine": 117,
        "startChar": 40,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4429373_eaddfec2",
        "filename": "CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T16:43:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18179611_f0f82ec7",
      "range": {
        "startLine": 117,
        "startChar": 40,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3a5e4ad_f716d91a",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "nit: let\u0027s use a constant for the common part of these two",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 53
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "683fc4e0_e42a8c07",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T16:43:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3a5e4ad_f716d91a",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 53
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5677ab13_9baeaa2a",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T17:35:06Z",
      "side": 1,
      "message": "Not done. Needs some digging into constexpr strings.",
      "parentUuid": "683fc4e0_e42a8c07",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 53
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c5e5e43_e18d6d06",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "please add docstrings",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 30,
        "endChar": 10
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03c205a1_ae5c2e60",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T16:43:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c5e5e43_e18d6d06",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 30,
        "endChar": 10
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3e8a135_b83e5dce",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "nit: \"be overridden\"",
      "range": {
        "startLine": 34,
        "startChar": 99,
        "endLine": 34,
        "endChar": 107
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c4bd477_b20419e5",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T16:43:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3e8a135_b83e5dce",
      "range": {
        "startLine": 34,
        "startChar": 99,
        "endLine": 34,
        "endChar": 107
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc696735_471a6028",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "nit: swap these, please, so that we follow the natural order of resolution",
      "range": {
        "startLine": 36,
        "startChar": 98,
        "endLine": 36,
        "endChar": 122
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94ab390b_a0b671d5",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T16:43:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc696735_471a6028",
      "range": {
        "startLine": 36,
        "startChar": 98,
        "endLine": 36,
        "endChar": 122
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7da4716b_d6a7f09f",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "nit: \"is not\"",
      "range": {
        "startLine": 39,
        "startChar": 39,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60474468_4e919e8f",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T16:43:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7da4716b_d6a7f09f",
      "range": {
        "startLine": 39,
        "startChar": 39,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4797b42_013c9321",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "The documentation does not tell me what the relation is between the \"TZ that might be specified as a part of the timepoint\", and \"TZ that\u0027s passed as an argument\" (see the main comment for the PS, I guess)",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 40,
        "endChar": 5
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28c72182_27d18953",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T17:35:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4797b42_013c9321",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 40,
        "endChar": 5
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e1a0ac2_38bb1803",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "you might want to allow passing a date::time_zone and/or the C++20\u0027s STL equivalent here as well (but see the main comment first)",
      "range": {
        "startLine": 42,
        "startChar": 74,
        "endLine": 42,
        "endChar": 116
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "006b5f5b_362ba21c",
        "filename": "include/libyang-cpp/Time.hpp",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-19T09:07:11Z",
      "side": 1,
      "message": "on asecond thought, this looks like an unnecessary complication -- if the system supports either STL\u0027s zoned_time or HH-date\u0027s equivalent, one can as well just call make_zoned_time here.",
      "parentUuid": "1e1a0ac2_38bb1803",
      "range": {
        "startLine": 42,
        "startChar": 74,
        "endLine": 42,
        "endChar": 116
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a843e78_60fed3e9",
        "filename": "libyang-cpp.pc.in",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "Since the .pc file is supposed to be usable as-is, without any extra options, and because `date` is a library whose headers are needed for compiling the `libyang-cpp/Time.hpp`, I think that you have to use CMake\u0027s functionality to extract the include directory from the date::date package, and write it here as well. The current version of the code would work in the most common case when both `libyang-cpp` and `date` are installed in the same prefix, but it will produce a .pc which will require some extra options to be used when `date` is outside of the common prefix.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 23
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c728574a_c3cc617c",
        "filename": "libyang-cpp.pc.in",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "I don\u0027t think this will work, see https://people.freedesktop.org/~dbn/pkg-config-guide.html:\n\n\u003e Name: A human-readable name for the library or package. This does not affect usage of the pkg-config tool, which uses the name of the .pc file.\n\nI\u0027m pretty sure you\u0027ll need a new .pc.in and the associated blurb in CMakeLists.txt.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 18,
        "endChar": 23
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "802f8e27_11eb873f",
        "filename": "libyang-cpp.pc.in",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-19T09:07:11Z",
      "side": 1,
      "message": "during the call we decided to skip this; since the code will support either the new-engough-STL or the HH-date-and-TZ code automatically, there\u0027s no way to encode this into .pc dependencies that I know of",
      "parentUuid": "0a843e78_60fed3e9",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 23
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22052f1b_615209d5",
        "filename": "libyang-cpp.pc.in",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-19T09:07:11Z",
      "side": 1,
      "message": "in the end we won\u0027t be using a new .pc file",
      "parentUuid": "c728574a_c3cc617c",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 18,
        "endChar": 23
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3afc408_d3683b1e",
        "filename": "libyang-cpp.pc.in",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T16:43:11Z",
      "side": 1,
      "message": "This comment was sent on an old WiP patch so it is not relevant.",
      "parentUuid": "c728574a_c3cc617c",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 18,
        "endChar": 23
      },
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "067e55ba_a2dbe946",
        "filename": "tests/time.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-18T16:09:37Z",
      "side": 1,
      "message": "I think that this code mixes up the resolution of the underlying datatype (which is what the implementation is using for the decision on how to format that string) with the question on how much data was provided to the object constructor.\n\nSince the actual formater is based on the type info only, could you please add a static_assert into each of these subcases which checks that the actual resolution of the `decltype(time)` matches your expectation?",
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66e81aa8_45fa0f84",
        "filename": "tests/time.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-06-19T17:35:06Z",
      "side": 1,
      "message": "Rewrote.",
      "parentUuid": "067e55ba_a2dbe946",
      "revId": "59c315b036d00cf3c90bfd0a4e811d752a5b836e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}